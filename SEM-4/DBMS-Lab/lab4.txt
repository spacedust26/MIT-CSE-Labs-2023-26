1)Find the number of students in each course.

select course_id, count(distinct id)
from takes
group by course_id;

2)Find those departments where the average number of students are greater than 10.

select dept_name, count(distinct id)
from student natural join takes
group by dept_name
having count(distinct id) > 2;

3)Find the total number of courses in each department.

select dept_name, count(distinct course_id)
from course
group by dept_name;

4)Find the names and average salaries of all departments whose average salary is 
greater than 42000.

select dept_name, avg(salary)
from instructor
group by dept_name
having avg(salary) > 42000;

5)Find the enrolment of each section that was offered in Spring 2009.

select sec_id, count(distinct id)
from takes
where semester = 'Spring' and year = 2009
group by sec_id;

6)List all the courses with prerequisite courses, then display course id in increasing 
order

select course_id , prereq_id
from prereq
order by course_id asc;

7)Display the details of instructors sorting the salary in decreasing order. 

select *
from instructor
order by salary desc;

8)Find the maximum total salary across the departments.

select max(total_salary)
from (select sum(salary) total_salary
from instructor
group by dept_name);

9)Find the average instructors’ salaries of those departments where the average 
salary is greater than 42000.

select avg(avg_salary)
from (select avg(salary) avg_salary
from instructor
group by dept_name
having avg(salary)>42000);

10)Find the sections that had the maximum enrolment in Spring 2010

select max(total_student)
from(select count(id) as total_student
from takes
group by sec_id, semester, year
having semester = 'Spring' and year = 2010);

11)Find the names of all instructors who teach all students that belong to ‘CSE’ 
department.

select distinct name
from instructor natural join teaches
where course_id in (select course_id
from takes natural join student
where dept_name = 'Comp. Sci.'); 

12)Find the average salary of those department where the average salary is greater 
than 50000 and total number of instructors in the department are more than 5.

select avg(dept_salary)
from(select avg(salary) dept_salary
from instructor
group by dept_name
having avg(salary) > 50000 and count(id)<=5);

13) Find all departments with the maximum budget.

with temp as
(select max(budget) as temp
from department)
select dept_name, budget
from department, temp
where department.budget = temp;

14)Find all departments where the total salary is greater than the average of the total 
salary at all departments.

with temp as
(select avg(sum(salary)) as temp
from instructor
group by dept_name)
select dept_name, sum(salary)
from instructor,temp
group by dept_name, temp
having sum(salary) > temp;

15)Transfer all the students from CSE department to IT department.

savepoint sp1;

update student set dept_name = 'Physics'
where dept_name = 'Comp. Sci.';

rollback to sp1;

16)Increase salaries of instructors whose salary is over $100,000 by 3%, and all 
others receive a 5% raise

savepoint sp2;

update instructor set salary = case
when salary <= 100000 then salary*1.05
else salary*1.03
end;

rollback to sp2;


























1)Find the number of students in each course.
SELECT course_id , count(distinct id)
FROM takes
GROUP BY course_id;

2)Find the department names with total number of students greater than average number of students from all departments
SELECT dept_name, count(distinct id)
FROM student
GROUP BY dept_name
HAVING count(distinct id)> (SELECT avg(count(distinct id))
FROM student
GROUP BY dept_name
);

3)Find the total number of courses in each department.
SELECT dept_name, count(distinct course_id)
FROM course
GROUP BY  dept_name;

4)Find the names and average salaries of all departments whose average salary is 
greater than 42000.
SELECT dept_name , avg(salary)
FROM instructor
GROUP BY dept_name
HAVING avg(salary) > 42000;

5)Find the enrolment of each section that was offered in Spring 2009.
SELECT sec_id, count(distinct id)
FROM takes 
WHERE semester = 'Spring' AND year = 2009
GROUP BY sec_id;

6)List all the courses with prerequisite courses, then display course id in increasing 
order.
SELECT course_id, prereq_id
FROM prereq
ORDER BY course_id ASC;

7)Display the details of instructors sorting the salary in decreasing order. 
SELECT  * 
FROM instructor
ORDER BY salary DESC;

8)Find the maximum total salary across the departments.
SELECT max(total_salary)
FROM (SELECT sum(salary) as total_salary
FROM instructor
GROUP BY dept_name);

9)Find the average instructors’ salaries of those departments where the average 
salary is greater than 42000
SELECT avg(avg_salary)
FROM (SELECT avg(salary) as avg_salary
FROM instructor
GROUP BY dept_name
HAVING avg(salary) > 42000);

10)Find the sections that had the maximum enrolment in Spring 2010
SELECT MAX(total_student) 
FROM (SELECT COUNT(ID) AS total_student 
FROM TAKES 
GROUP BY sec_id, semester, year 
HAVING semester='Spring' and year=2010);

11) Find the names of all instructors who teach all students that belong to ‘CSE’ 
department.
SELECT DISTINCT name 
FROM teaches NATURAL JOIN instructor 
WHERE course_id IN (SELECT DISTINCT course_id FROM takes NATURAL JOIN student WHERE dept_name='Comp. Sci.');

12)Find the average salary of those department where the average salary is greater 
than 50000 and total number of instructors in the department are more than 5.
SELECT dept_name, avg(salary) 
FROM instructor 
GROUP BY dept_name 
HAVING avg(salary)>50000 and count(id)>5;

13)Find all departments with the maximum budget.
WITH max_budget AS (SELECT max(budget) AS max_budget
FROM department)
SELECT * 
FROM department, max_budget
WHERE max_budget = department.budget;

14)Find all departments where the total salary is greater than the average of the total 
salary at all departments.
WITH temp AS (SELECT avg(sum(salary)) AS T 
FROM instructor 
GROUP BY dept_name)
SELECT distinct dept_name 
FROM instructor,temp 
GROUP BY dept_name,T 
HAVING sum(salary)>T;

15) Transfer all the students from CSE department to IT department
SAVEPOINT sp1;
Update student 
set dept_name ='IT'
Where dept_name = 'Comp. Sci';
ROLLBACK to sp1;

16)Increase salaries of instructors whose salary is over $100,000 by 3%, and all  
others receive a 5% raise
SAVEPOINT sp2;
update instructor
set salary = salary * 1.03
where salary > 100000;
update instructor
set salary = salary * 1.05
where salary <= 100000;
ROLLBACK TO sp2;