create table studenttable(
  rollno int,
  gpa float
);

insert into studenttable values(1, 5.8);
insert into studenttable values(2, 6.5);
insert into studenttable values(3, 3.4);
insert into studenttable values(4, 7.8);
insert into studenttable values(5, 4.5);

1. Write a PL/SQL block to display the GPA of given student

set serveroutput on;
declare
  num float;
begin
  select gpa into num from studenttable where rollno = 1;
  dbms_output.put_line('GPA is ' || num);
end;
/

2. Write a PL/SQL block to display the letter grade(0-4: F; 4-5: E; 5-6: D; 6-7: C;                 
7-8: B; 8-9: A; 9-10: A+) of given student.

declare
	roll_number studenttable.rollno%type;
	score studenttable.gpa%type;
begin
	roll_number:='&r';
	select gpa into score from studenttable where rollno = roll_number;
	if score between 0 and 4  then
		dbms_output.put_line('F');
	elsif score between 4 and 5 then
		dbms_output.put_line('E');
	elsif score between 5 and 6 then
		dbms_output.put_line('D');
	elsif score between 6 and 7 then
		dbms_output.put_line('C');
	elsif score between 7 and 8 then
		dbms_output.put_line('B');
	elsif score between 8 and 9 then
		dbms_output.put_line('A');	
	else 
		dbms_output.put_line('A+');									
	end if;
end;
/

3. Input the date of issue and date of return for a book. Calculate and display the fine 
with the appropriate message using a PL/SQL block. The fine is charged as per 
the table 8.1:  
 
Late period Fine 
7 days NIL 
8 â€“ 15 days Rs.1/day 
16 - 30 days Rs. 2/ day 
After 30 days Rs. 5.00 

declare
	issue_date date;
	return_date date;
	diff number(5);
	fine number(5);
begin
	issue_date := to_date('&issue_date','dd-mm-yy');
	return_date := to_date('&return_date','dd-mm-yy');
	diff := return_date - issue_date;
	if diff between 0 and 7 then
		fine := 0;
	elsif diff between 8 and 15 then
		fine:= diff;
	elsif diff between 16 and 30 then
		fine := diff * 2;
	else
		fine := diff * 5;
	end if;
  dbms_output.put_line('Fine charged : ' || fine);					
end;
/

4. Write a PL/SQL block to print the letter grade of all the students(RollNo: 1 - 5).

declare
    i int;
    g float;
    grade char(4);
begin
    i := 1;
    loop
        select gpa into g from studenttable where rollno = i;
        if g > 0 and g <= 4 then
            grade := 'F';
        elsif g > 4 and g <= 5 then
            grade := 'E';
       elsif g > 5 and g <= 6 then
            grade := 'D';
        elsif g > 6 and g <= 7 then
            grade := 'C';
        elsif g > 7 and g <= 8 then
            grade := 'B';
        elsif g > 8 and g <= 9 then
            grade := 'A';
        elsif g > 9 and g <= 10 then
            grade := 'A+';
        else
            grade := 'NILL';
        end if;
        dbms_output.put_line('Roll no ' || i || ' grade ' || grade);
        i := i + 1;
        if i > 5 then exit;
        end if;
    end loop;
end;
/

5. Alter StudentTable by appending an additional column LetterGrade Varchar2(2). 
Then write a PL/SQL block to update the table with letter grade of each student.

alter table studenttable add (lettergrade varchar(2));

declare
    g float;
    i int;
    n int;
begin
    select count(*) into n from studenttable;
    i := 1;
    while i <= n
    loop
        select gpa into g from studenttable where rollno = i;
        if g > 0 and g <= 4 then
            update studenttable set lettergrade = 'F' where rollno = i;
        elsif g > 4 and g <= 5 then
            update studenttable set lettergrade = 'E' where rollno = i;
       elsif g > 5 and g <= 6 then
            update studenttable set lettergrade = 'D' where rollno = i;
        elsif g > 6 and g <= 7 then
            update studenttable set lettergrade = 'C' where rollno = i;
        elsif g > 7 and g <= 8 then
            update studenttable set lettergrade = 'B' where rollno = i;
        elsif g > 8 and g <= 9 then
            update studenttable set lettergrade = 'A' where rollno = i;
        elsif g > 9 and g <= 10 then
            update studenttable set lettergrade = 'A+' where rollno = i;
        end if;
        i := i + 1;
    end loop;
end;
/

6. Write a PL/SQL block to find the student with max. GPA without using aggregate 
function.

declare
    g float;
    mg float;
    i int;
    n int;
begin
    select count(*) into n from studenttable;
    i := 1;
    mg := 0;
    for i in 1..n loop
        select gpa into g from studenttable where rollno = i;
        if g > mg then
            mg := g;
        end if;
    end loop;
    select rollno into i from studenttable where gpa = mg;
    dbms_output.put_line('Student with max gpa is roll no. '|| i);
end;
/

7. Implement lab exercise 4 using GOTO.

declare
    i int;
    g float;
    gr varchar(2);
begin
    i := 1;
    loop
        select gpa into g from studenttable where rollno = i;
        if g > 0 and g <= 4 then
            gr :='F';
            goto disp;
        elsif g > 4 and g <= 5 then
            gr :='E';
            goto disp;
       elsif g > 5 and g <= 6 then
            gr :='D';
            goto disp;
        elsif g > 6 and g <= 7 then
            gr :='C';
            goto disp;
        elsif g > 7 and g <= 8 then
            gr :='B';
            goto disp;
        elsif g > 8 and g <= 9 then
            gr :='A';
            goto disp;
        elsif g > 9 and g <= 10 then
            gr :='A+';
            goto disp;
        else
            dbms_output.put_line('no grade');
        end if;
        <<disp>>
            dbms_output.put_line('Roll no ' || i || ' grade is '|| gr);
        i := i + 1;
        if i > 5 then exit;
        end if;
    end loop;
end;
/

8. Based on the University database schema, write a PL/SQL block to display the 
details of the Instructor whose name is supplied by the user. Use exceptions to 
show appropriate error message for the following cases:
a. Multiple instructors with the same name
b. No instructor for the given name

declare
    name instructor.name%TYPE;
begin
    select name into name from instructor where name='&name';
    dbms_output.put_line(name||' Found');
    exception
    when no_data_found then dbms_output.put_line('No Rows Found');
    when dup_val_on_index then dbms_output.put_line('Multiple Rows Found');
end;
/